class NavigationManager {
    constructor() {
        this.currentPage = 'index';
        this.init();
    }

    init() {
        this.setupLinkInterceptors();
        this.setupHistoryHandler();
        this.setupMenuToggle();
    }

    setupLinkInterceptors() {
        document.addEventListener('click', (e) => {
            const link = e.target.closest('a[href]');
            if (link && !link.href.startsWith('http')) {
                e.preventDefault();
                this.handleNavigation(link.getAttribute('href'));
            }
        });
    }

    setupHistoryHandler() {
        window.addEventListener('popstate', () => {
            this.loadPage(window.location.pathname, false);
        });
    }

    handleNavigation(path) {
        history.pushState({}, '', path);
        this.loadPage(path, true);
    }

    async loadPage(path, animate = true) {
        try {
            const response = await fetch(path);
            if (!response.ok) throw new Error('Página não encontrada');
            
            const html = await response.text();
            const doc = new DOMParser().parseFromString(html, 'text/html');
            const newContent = doc.querySelector('main');

            if (newContent) {
                if (animate) await this.animatePageTransition();
                this.updatePageContent(newContent.innerHTML);
                this.updateActiveNavigation(path);
                this.initializePageComponents();
                window.scrollTo({ top: 0, behavior: 'smooth' });
            }
        } catch (error) {
            this.showErrorMessage('Erro ao carregar a página');
        }
    }

    async animatePageTransition() {
        return new Promise(resolve => {
            const main = document.querySelector('main');
            main.style.opacity = '0';
            setTimeout(() => {
                main.style.opacity = '1';
                main.style.transition = 'opacity 0.3s ease';
                resolve();
            }, 50);
        });
    }

    updatePageContent(content) {
        document.querySelector('main').innerHTML = content;
    }

    updateActiveNavigation(path) {
        document.querySelectorAll('.nav-link').forEach(link => {
            link.classList.remove('active');
            if (link.getAttribute('href') === path) {
                link.classList.add('active');
            }
        });
    }

    setupMenuToggle() {
        const menuToggle = document.querySelector('.menu-toggle');
        const navMenu = document.querySelector('.nav-menu');

        if (menuToggle && navMenu) {
            menuToggle.addEventListener('click', () => {
                navMenu.classList.toggle('active');
            });
        }
    }

    initializePageComponents() {
        this.setupMenuToggle();
        this.initializeFormValidation();
    }

    showErrorMessage(message) {
        const errorDiv = document.createElement('div');
        errorDiv.className = 'alert alert-error';
        errorDiv.textContent = message;
        document.querySelector('main').prepend(errorDiv);
        
        setTimeout(() => errorDiv.remove(), 5000);
    }
}

class FormValidationSystem {
    constructor(formElement) {
        this.form = formElement;
        this.validationRules = this.getValidationRules();
        this.init();
    }

    getValidationRules() {
        return {
            nome: {
                required: true,
                pattern: /^[A-Za-zÀ-ÿ\s]{2,}$/,
                errorMessage: 'Nome deve ter pelo menos 2 caracteres'
            },
            email: {
                required: true,
                pattern: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
                errorMessage: 'Digite um email válido'
            },
            cpf: {
                required: true,
                pattern: /^\d{3}\.\d{3}\.\d{3}-\d{2}$/,
                errorMessage: 'CPF no formato 000.000.000-00'
            },
            telefone: {
                required: true,
                pattern: /^\(\d{2}\)\s\d{4,5}-\d{4}$/,
                errorMessage: 'Telefone no formato (00) 00000-0000'
            },
            nascimento: {
                required: true,
                validate: (value) => this.validateAge(value),
                errorMessage: 'É necessário ter pelo menos 16 anos'
            },
            cep: {
                required: true,
                pattern: /^\d{5}-\d{3}$/,
                errorMessage: 'CEP no formato 00000-000'
            },
            endereco: { required: true, errorMessage: 'Endereço é obrigatório' },
            cidade: { required: true, errorMessage: 'Cidade é obrigatória' },
            estado: { required: true, errorMessage: 'Estado é obrigatório' },
            termos: { required: true, errorMessage: 'Aceite os termos para continuar' }
        };
    }

    init() {
        this.setupInputMasks();
        this.setupRealTimeValidation();
        this.setupFormSubmission();
    }

    setupInputMasks() {
        this.initializeCPFMask();
        this.initializePhoneMask();
        this.initializeCEPMask();
    }

    initializeCPFMask() {
        const cpfField = document.getElementById('cpf');
        if (cpfField) {
            cpfField.addEventListener('input', (e) => {
                e.target.value = this.applyCPFMask(e.target.value);
            });
        }
    }

    initializePhoneMask() {
        const phoneField = document.getElementById('telefone');
        if (phoneField) {
            phoneField.addEventListener('input', (e) => {
                e.target.value = this.applyPhoneMask(e.target.value);
            });
        }
    }

    initializeCEPMask() {
        const cepField = document.getElementById('cep');
        if (cepField) {
            cepField.addEventListener('input', (e) => {
                e.target.value = this.applyCEPMask(e.target.value);
            });
        }
    }

    applyCPFMask(value) {
        return value.replace(/\D/g, '')
            .replace(/(\d{3})(\d)/, '$1.$2')
            .replace(/(\d{3})(\d)/, '$1.$2')
            .replace(/(\d{3})(\d{1,2})$/, '$1-$2')
            .slice(0, 14);
    }

    applyPhoneMask(value) {
        return value.replace(/\D/g, '')
            .replace(/(\d{2})(\d)/, '($1) $2')
            .replace(/(\d{5})(\d)/, '$1-$2')
            .slice(0, 15);
    }

    applyCEPMask(value) {
        return value.replace(/\D/g, '')
            .replace(/(\d{5})(\d)/, '$1-$2')
            .slice(0, 9);
    }

    setupRealTimeValidation() {
        Object.keys(this.validationRules).forEach(fieldName => {
            const field = document.getElementById(fieldName);
            if (field) {
                field.addEventListener('blur', () => this.validateField(fieldName));
                field.addEventListener('input', () => this.clearFieldError(fieldName));
            }
        });
    }

    validateField(fieldName) {
        const field = document.getElementById(fieldName);
        const rules = this.validationRules[fieldName];
        let isValid = true;
        let errorMessage = '';

        if (rules.required && !field.value.trim()) {
            isValid = false;
            errorMessage = 'Este campo é obrigatório';
        } else if (rules.pattern && !rules.pattern.test(field.value)) {
            isValid = false;
            errorMessage = rules.errorMessage;
        } else if (rules.validate && !rules.validate(field.value)) {
            isValid = false;
            errorMessage = rules.errorMessage;
        }

        this.updateFieldVisualFeedback(fieldName, isValid, errorMessage);
        return isValid;
    }

    validateAge(birthDate) {
        const today = new Date();
        const birth = new Date(birthDate);
        const age = today.getFullYear() - birth.getFullYear();
        return age >= 16;
    }

    updateFieldVisualFeedback(fieldName, isValid, errorMessage) {
        const field = document.getElementById(fieldName);
        const errorElement = document.getElementById(`${fieldName}-error`);

        if (isValid) {
            field.classList.remove('error');
            field.classList.add('success');
            errorElement.textContent = '';
            errorElement.classList.remove('visible');
        } else {
            field.classList.remove('success');
            field.classList.add('error');
            errorElement.textContent = errorMessage;
            errorElement.classList.add('visible');
        }
    }

    clearFieldError(fieldName) {
        const errorElement = document.getElementById(`${fieldName}-error`);
        errorElement.textContent = '';
        errorElement.classList.remove('visible');
    }

    validateCompleteForm() {
        let isFormValid = true;
        Object.keys(this.validationRules).forEach(fieldName => {
            if (!this.validateField(fieldName)) {
                isFormValid = false;
            }
        });
        return isFormValid;
    }

    setupFormSubmission() {
        this.form.addEventListener('submit', (e) => {
            e.preventDefault();
            if (this.validateCompleteForm()) {
                this.handleFormSuccess();
            } else {
                this.showFormLevelError();
            }
        });
    }

    handleFormSuccess() {
        const form = document.getElementById('formCadastro');
        const successMessage = document.getElementById('feedback');

        form.classList.add('hidden');
        successMessage.classList.remove('hidden');
        successMessage.scrollIntoView({ behavior: 'smooth' });
    }

    showFormLevelError() {
        let globalError = document.getElementById('global-form-error');
        if (!globalError) {
            globalError = document.createElement('div');
            globalError.id = 'global-form-error';
            globalError.className = 'alert alert-error';
            globalError.textContent = 'Por favor, corrija os erros destacados no formulário.';
            this.form.parentNode.insertBefore(globalError, this.form);
        }

        const firstErrorField = document.querySelector('.error');
        if (firstErrorField) {
            firstErrorField.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
    }
}

document.addEventListener('DOMContentLoaded', () => {
    new NavigationManager();
    
    const form = document.getElementById('formCadastro');
    if (form) {
        new FormValidationSystem(form);
    }
});
